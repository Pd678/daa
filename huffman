import heapq

# Creating Huffman tree node
class Node:
    def __init__(self, freq, symbol, left=None, right=None):
        self.freq = freq          # frequency of symbol
        self.symbol = symbol      # symbol name (character)
        self.left = left          # node left of current node
        self.right = right        # node right of current node
        self.huff = ''            # tree direction (0/1)

    # Comparator for priority queue
    def __lt__(self, nxt):
        return self.freq < nxt.freq


def printnodes(node, val=''):
    newval = val + str(node.huff)

    # if node is not an edge node then traverse inside it
    if node.left:
        printnodes(node.left, newval)
    if node.right:
        printnodes(node.right, newval)

    # if node is edge node then display its huffman code
    if not node.left and not node.right:
        print(f"{node.symbol} -> {newval}")


if __name__ == "__main__":
    chars = ['a', 'b', 'c', 'd', 'e', 'f']
    freq = [5, 9, 12, 13, 16, 45]
    nodes = []

    # creating initial nodes
    for x in range(len(chars)):
        nodes.append(Node(freq[x], chars[x]))

    # create priority queue (min-heap)
    heapq.heapify(nodes)

    while len(nodes) > 1:
        # remove two nodes with lowest frequency
        left = heapq.heappop(nodes)
        right = heapq.heappop(nodes)

        # assign directional values
        left.huff = 0
        right.huff = 1

        # combine the two smallest nodes
        newNode = Node(left.freq + right.freq, left.symbol + right.symbol, left, right)

        # add new node to heap
        heapq.heappush(nodes, newNode)

    # print Huffman codes
    printnodes(nodes[0])

